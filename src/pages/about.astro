---
import BaseLayout from '../layouts/BaseLayout.astro';
import { FaJs, FaReact, FaNodeJs, FaPython, FaDocker } from 'react-icons/fa';
import { SiTypescript, SiRuby } from 'react-icons/si';
import { TbBrandCSharp } from "react-icons/tb";
import { SiRubyonrails } from "react-icons/si";
import { SITE_TITLE } from '../consts';


// Skill information with programming language logo
const skills = [
  {  name: "JavaScript",  icon: FaJs },
  {  name: "TypeScript",  icon: SiTypescript },
  {  name: "React",  icon: FaReact },
  {  name: "Node.js",  icon: FaNodeJs },
  {  name: "Python",  icon: FaPython },
  {  name: "Ruby",  icon: SiRuby },
  {  name: "Ruby on Rails",  icon: SiRubyonrails },
  {  name: "C#",  icon: TbBrandCSharp },
  {  name: "Docker",  icon: FaDocker },
];
---
<BaseLayout title=`About Me | ${SITE_TITLE}` description="Learn more about my background, skills, and experience">
  <div class="max-w-6xl mx-auto px-4 sm:px-6 py-8 sm:py-12 md:py-16 theme-transition-all">
    <!-- Hero Section - Improved mobile layout -->
    <div class="relative mb-12 sm:mb-16 md:mb-20">
      <!-- Decorative elements - adjusted for better mobile appearance -->
      <div class="absolute -top-10 sm:-top-20 -left-10 sm:-left-20 w-36 sm:w-48 md:w-72 h-36 sm:h-48 md:h-72 bg-zinc-100 dark:bg-zinc-800/30 rounded-full blur-3xl opacity-30 animate-blob theme-transition-bg"></div>
      <div class="absolute -bottom-10 sm:-bottom-20 -right-10 sm:-right-20 w-36 sm:w-48 md:w-72 h-36 sm:h-48 md:h-72 bg-zinc-200 dark:bg-zinc-800/30 rounded-full blur-3xl opacity-30 animate-blob animation-delay-2000 theme-transition-bg"></div>
      
      <div class="relative grid grid-cols-1 md:grid-cols-2 gap-8 md:gap-12 items-center">
        <div class="order-2 md:order-1 text-center md:text-left">
          <h1 class="text-3xl sm:text-4xl md:text-5xl font-bold tracking-tight text-zinc-900 dark:text-zinc-100 mb-4 sm:mb-6 theme-transition-color">
            Hello, I'm <span class="text-transparent bg-clip-text bg-gradient-to-r from-zinc-500 to-zinc-900 dark:from-zinc-300 dark:to-zinc-100 theme-transition-all">Richardson Rosa</span>
          </h1>
          
          <p class="text-lg sm:text-xl text-zinc-600 dark:text-zinc-400 mb-6 sm:mb-8 leading-relaxed theme-transition-color">
            Backend, frontend, team management, and everything in between.
            <br/>
            Getting things done with quality ðŸ¤“.
          </p>
          
          <div class="flex flex-wrap gap-4 social-links-container justify-center md:justify-start theme-transition-children">
            <!-- Social links remain the same -->
          </div>
        </div>
        
        <div class="order-1 md:order-2 relative">
          <div class="aspect-square w-full max-w-[280px] sm:max-w-[320px] md:max-w-md mx-auto overflow-hidden rounded-3xl border-4 sm:border-8 border-white dark:border-zinc-800 shadow-xl sm:shadow-2xl theme-transition-all">
            <img 
              src="https://avatars.githubusercontent.com/u/12430174" 
              alt="Profile photo" 
              class="w-full h-full object-cover"
              loading="eager"
            />
          </div>
        </div>
      </div>
    </div>
    
    <!-- About Section - Improved spacing for mobile -->
    <div class="mb-16 sm:mb-20 md:mb-24 theme-transition-all">
      <div class="max-w-3xl mx-auto">
        <h2 class="text-2xl sm:text-3xl font-bold text-zinc-900 dark:text-zinc-100 mb-6 sm:mb-8 flex items-center justify-center md:justify-start theme-transition-color">
          <span class="hidden sm:inline-block w-8 sm:w-12 h-1 bg-zinc-300 dark:bg-zinc-700 mr-4 theme-transition-bg"></span>
          About Me
          <span class="hidden sm:inline-block w-8 sm:w-12 h-1 bg-zinc-300 dark:bg-zinc-700 ml-4 theme-transition-bg"></span>
        </h2>
        
        <div class="prose prose-zinc dark:prose-invert max-w-none theme-transition-all">
          <p class="text-base sm:text-lg leading-relaxed mb-4 sm:mb-6 theme-transition-color">
            I'm a full-stack developer who can finish it on time, focusing on quality and performance.
          </p>
          <p class="text-base sm:text-lg leading-relaxed mb-4 sm:mb-6 theme-transition-color">
            With over 8 years of experience in the industry, working on a variety of projects from different domains, such as fintech and industry. Leading teams and mentoring junior developers. 
          </p>
          <p class="text-base sm:text-lg leading-relaxed mb-4 sm:mb-6 theme-transition-color">
            I've contributed to custom ERP systems, web crawlers, regulatory management systems, and more.
          </p>
          
          <!-- Other paragraphs remain the same -->
        </div>
      </div>
    </div>
    
    <!-- Skills Section - Improved for mobile -->
    <div class="theme-transition-all">
      <h2 class="text-2xl sm:text-3xl font-bold text-zinc-900 dark:text-zinc-100 mb-8 sm:mb-12 text-center theme-transition-color">Tech Stack</h2>

      <div class="tech-stack-slider relative overflow-hidden space-y-6 py-4 sm:py-8">
        <!-- Row 1: Right -->
        <div class="slider-track flex">
          {[...skills, ...skills].map((skill, index) => (
            <div key={`row1-${skill.name}-${index}`} class="skill-card min-w-[220px] mx-2 sm:mx-4 bg-white dark:bg-zinc-800/50 rounded-xl border border-zinc-200 dark:border-zinc-700 hover:border-zinc-300 dark:hover:border-zinc-600 transition-all duration-300 hover:shadow-xl transform hover:-translate-y-2 hover:scale-105 theme-transition-element">
              <div class="p-4 sm:p-6">
                <div class="flex items-center gap-2 sm:gap-4">
                  <div class="w-8 h-8 sm:w-12 sm:h-12 flex items-center justify-center bg-zinc-100 dark:bg-zinc-800 rounded-lg text-zinc-800 dark:text-zinc-200 transform transition-transform group-hover:rotate-12 theme-transition-bg theme-transition-color">
                    <skill.icon size={20} className="sm:text-2xl transform transition-all hover:scale-125" />
                  </div>
                  <h3 class="text-base sm:text-xl font-semibold text-zinc-900 dark:text-zinc-100 theme-transition-color">{skill.name}</h3>
                </div>
              </div>
            </div>
          ))}
        </div>

        <!-- Row 2: Left -->
        <div class="slider-track flex reverse">
          {[...skills, ...skills].map((skill, index) => (
            <div key={`row2-${skill.name}-${index}`} class="skill-card min-w-[220px] mx-2 sm:mx-4 bg-white dark:bg-zinc-800/50 rounded-xl border border-zinc-200 dark:border-zinc-700 hover:border-zinc-300 dark:hover:border-zinc-600 transition-all duration-300 hover:shadow-xl transform hover:-translate-y-2 hover:scale-105 theme-transition-element">
              <div class="p-4 sm:p-6">
                <div class="flex items-center gap-2 sm:gap-4">
                  <div class="w-8 h-8 sm:w-12 sm:h-12 flex items-center justify-center bg-zinc-100 dark:bg-zinc-800 rounded-lg text-zinc-800 dark:text-zinc-200 transform transition-transform group-hover:rotate-12 theme-transition-bg theme-transition-color">
                    <skill.icon size={20} className="sm:text-2xl transform transition-all hover:scale-125" />
                  </div>
                  <h3 class="text-base sm:text-xl font-semibold text-zinc-900 dark:text-zinc-100 theme-transition-color">{skill.name}</h3>
                </div>
              </div>
            </div>
          ))}
        </div>

        <!-- Gradient overlays for smooth fade effect -->
        <div class="absolute top-0 bottom-0 left-0 w-12 sm:w-24 bg-gradient-to-r from-white dark:from-zinc-900 to-transparent z-10 theme-transition-bg"></div>
        <div class="absolute top-0 bottom-0 right-0 w-12 sm:w-24 bg-gradient-to-l from-white dark:from-zinc-900 to-transparent z-10 theme-transition-bg"></div>
      </div>
    </div>
  </div>
</BaseLayout>

<script>
  // Wait for the DOM to be fully loaded
document.addEventListener('DOMContentLoaded', () => {
  const sliderTracks = document.querySelectorAll('.slider-track');

  // Set proper animation per row and screen size
  sliderTracks.forEach(track => {
    function updateAnimation() {
      const isMobile = window.innerWidth < 640;
      const duration = isMobile ? '40s' : '60s';

      if (track.classList.contains('reverse')) {
        track.style.animation = `scroll-right ${duration} linear infinite`;
      } else {
        track.style.animation = `scroll-left ${duration} linear infinite`;
      }
    }

    updateAnimation();
    window.addEventListener('resize', updateAnimation);

    // Pause/resume on hover or touch
    track.addEventListener('mouseenter', () => track.style.animationPlayState = 'paused');
    track.addEventListener('mouseleave', () => track.style.animationPlayState = 'running');
    track.addEventListener('touchstart', () => track.style.animationPlayState = 'paused');
    track.addEventListener('touchend', () => {
      setTimeout(() => {
        track.style.animationPlayState = 'running';
      }, 1000); // Delay resuming animation after touch
    });
  });

    // Add hover effects to cards - only on non-touch devices
  const isTouchDevice = 'ontouchstart' in window || navigator.maxTouchPoints > 0;
  const cards = document.querySelectorAll('.skill-card');
  
  if (!isTouchDevice) {
    cards.forEach(card => {
      card.addEventListener('mousemove', (e) => {
        const rect = card.getBoundingClientRect();
        const x = e.clientX - rect.left;
        const y = e.clientY - rect.top;
          
        const centerX = rect.width / 2;
        const centerY = rect.height / 2;

        const angleX = (y - centerY) / 15;
        const angleY = (centerX - x) / 15;

        card.style.transform = `perspective(1000px) rotateX(${angleX}deg) rotateY(${angleY}deg) scale(1.08) translateZ(20px)`;

        // Dynamic shadow based on tilt
        const shadowX = (x - centerX) / 25;
        const shadowY = (y - centerY) / 25;
        card.style.boxShadow = `
          ${shadowX}px ${shadowY}px 20px rgba(0, 0, 0, 0.1),
          0 10px 20px rgba(0, 0, 0, 0.05)
        `;
      });

      card.addEventListener('mouseleave', () => {
        card.style.transform = '';
        card.style.boxShadow = '';
      });
    });
  } else {
      // Simpler effects for touch devices
    cards.forEach(card => {
      card.addEventListener('touchstart', () => {
        card.classList.add('is-touched');
      });
      
      card.addEventListener('touchend', () => {
        setTimeout(() => {
          card.classList.remove('is-touched');
        }, 300);
      });
    });
  }

    // Handle theme transition
  document.addEventListener('themeChange', () => {
      // Add special effects during theme transition
    cards.forEach((card, index) => {
        // Add staggered animation delay
      setTimeout(() => {
        card.classList.add('theme-changing');
        setTimeout(() => {
          card.classList.remove('theme-changing');
        }, 600);
      }, index * 50);
    });
  });
});
</script>

<script>
  // Handle SPA transitions for about page
  function setupSPATransitions() {
    // Handle all internal links for SPA transitions
    document.querySelectorAll('a[href^="/"]').forEach(link => {
      // Skip links that are anchor links, external links, or already processed
      if (link.getAttribute('href').includes('#') || 
          link.getAttribute('target') === '_blank' || 
          link.hasAttribute('data-spa-handled')) {
        return;
      }
      
      // Mark as handled to avoid duplicate listeners
      link.setAttribute('data-spa-handled', 'true');
      
      link.addEventListener('click', (e) => {
        // Don't handle if modifier keys are pressed (for opening in new tab, etc.)
        if (e.metaKey || e.ctrlKey || e.shiftKey || e.altKey) {
          return;
        }
        
        e.preventDefault();
        const targetHref = link.getAttribute('href');
        
        // Trigger page transition animation
        const pageTransition = document.getElementById('page-transition');
        if (pageTransition) {
          pageTransition.classList.remove('opacity-0');
          pageTransition.classList.add('opacity-100');
          
          // Navigate after transition effect
          setTimeout(() => {
            window.location.href = targetHref;
          }, 300);
        } else {
          // Fallback if transition element doesn't exist
          window.location.href = targetHref;
        }
      });
    });
    
    // Initialize animations for about page
    function animateAboutContent() {
      // Animate hero section elements
      const heroElements = document.querySelectorAll('h1, .order-2 p, .social-links-container');
      heroElements.forEach((el, index) => {
        setTimeout(() => {
          el.classList.add('animate-reveal');
        }, 100 + (index * 150));
      });
      
      // Animate profile image
      const profileImage = document.querySelector('.aspect-square');
      if (profileImage) {
        setTimeout(() => {
          profileImage.classList.add('animate-reveal');
        }, 200);
      }
      
      // Animate skill bars with staggered delay
      const skillBars = document.querySelectorAll('.skill-bar');
      skillBars.forEach((bar, index) => {
        setTimeout(() => {
          bar.classList.add('animate-skill');
        }, 500 + (index * 100));
      });
      
      // Animate sections with staggered delay
      const sections = document.querySelectorAll('section');
      sections.forEach((section, index) => {
        setTimeout(() => {
          section.classList.add('animate-reveal');
        }, 300 + (index * 200));
      });
    }
    
    // Run animations
    animateAboutContent();
  }
  
  // Initialize on first load
  document.addEventListener('DOMContentLoaded', setupSPATransitions);
  
  // Re-initialize when content changes via Astro's view transitions
  document.addEventListener('astro:page-load', setupSPATransitions);
  
  // For compatibility with custom transition system
  document.addEventListener('page-transition-complete', setupSPATransitions);
</script>